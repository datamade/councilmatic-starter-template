platform: linux/amd64

services:
  webpack:
    container_name: {{ cookiecutter.jurisdiction_slug }}_webpack
    build:
      context: .
      dockerfile: Dockerfile
      target: node
    stdin_open: true
    ports:
      - 3000:3000
    volumes:
      - .:/app
      - {{ cookiecutter.jurisdiction_slug }}_node_modules:/app/node_modules
    command: npm run serve

  app:
    build: .
    container_name: {{ cookiecutter.jurisdiction_slug }}_councilmatic
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    environment:
      DJANGO_MANAGEPY_MIGRATE: "on"
    volumes:
      - .:/app
    ports:
      - 8000:8000
    entrypoint: /app/docker-entrypoint.sh
    command: python manage.py runserver 0.0.0.0:8000

  postgres:
    container_name: {{ cookiecutter.jurisdiction_slug }}_postgres
    image: postgis/postgis:14-3.2
    platform: linux/amd64
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - {{ cookiecutter.jurisdiction_slug }}_postgres_data:/var/lib/postgresql/data
    ports:
      - 32006:5432

  elasticsearch:
    image: elasticsearch:7.14.2
    container_name: {{ cookiecutter.jurisdiction_slug }}_elasticsearch
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - logger.org.elasticsearch.discovery=DEBUG
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    mem_limit: 1g
    volumes:
      - {{ cookiecutter.jurisdiction_slug }}_es_data:/usr/share/elasticsearch/data

volumes:
  {{ cookiecutter.jurisdiction_slug }}_node_modules:
  {{ cookiecutter.jurisdiction_slug }}_postgres_data:
  {{ cookiecutter.jurisdiction_slug }}_es_data:
